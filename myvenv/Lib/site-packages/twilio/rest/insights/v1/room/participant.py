# coding=utf-8
r"""
This code was generated by
\ / _    _  _|   _  _
 | (_)\/(_)(_|\/| |(/_  v1.0.0
      /       /
"""

from twilio.base import deserialize
from twilio.base import values
from twilio.base.instance_context import InstanceContext
from twilio.base.instance_resource import InstanceResource
from twilio.base.list_resource import ListResource
from twilio.base.page import Page


class ParticipantList(ListResource):
    """ PLEASE NOTE that this class contains beta products that are subject to
    change. Use them with caution. """

    def __init__(self, version, room_sid):
        """
        Initialize the ParticipantList

        :param Version version: Version that contains the resource
        :param room_sid: The room_sid

        :returns: twilio.rest.insights.v1.room.participant.ParticipantList
        :rtype: twilio.rest.insights.v1.room.participant.ParticipantList
        """
        super(ParticipantList, self).__init__(version)

        # Path Solution
        self._solution = {'room_sid': room_sid, }
        self._uri = '/Video/Rooms/{room_sid}/Participants'.format(**self._solution)

    def stream(self, limit=None, page_size=None):
        """
        Streams ParticipantInstance records from the API as a generator stream.
        This operation lazily loads records as efficiently as possible until the limit
        is reached.
        The results are returned as a generator, so this operation is memory efficient.

        :param int limit: Upper limit for the number of records to return. stream()
                          guarantees to never return more than limit.  Default is no limit
        :param int page_size: Number of records to fetch per request, when not set will use
                              the default value of 50 records.  If no page_size is defined
                              but a limit is defined, stream() will attempt to read the
                              limit with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        :rtype: list[twilio.rest.insights.v1.room.participant.ParticipantInstance]
        """
        limits = self._version.read_limits(limit, page_size)

        page = self.page(page_size=limits['page_size'], )

        return self._version.stream(page, limits['limit'])

    def list(self, limit=None, page_size=None):
        """
        Lists ParticipantInstance records from the API as a list.
        Unlike stream(), this operation is eager and will load `limit` records into
        memory before returning.

        :param int limit: Upper limit for the number of records to return. list() guarantees
                          never to return more than limit.  Default is no limit
        :param int page_size: Number of records to fetch per request, when not set will use
                              the default value of 50 records.  If no page_size is defined
                              but a limit is defined, list() will attempt to read the limit
                              with the most efficient page size, i.e. min(limit, 1000)

        :returns: Generator that will yield up to limit results
        :rtype: list[twilio.rest.insights.v1.room.participant.ParticipantInstance]
        """
        return list(self.stream(limit=limit, page_size=page_size, ))

    def page(self, page_token=values.unset, page_number=values.unset,
             page_size=values.unset):
        """
        Retrieve a single page of ParticipantInstance records from the API.
        Request is executed immediately

        :param str page_token: PageToken provided by the API
        :param int page_number: Page Number, this value is simply for client state
        :param int page_size: Number of records to return, defaults to 50

        :returns: Page of ParticipantInstance
        :rtype: twilio.rest.insights.v1.room.participant.ParticipantPage
        """
        data = values.of({'PageToken': page_token, 'Page': page_number, 'PageSize': page_size, })

        response = self._version.page(method='GET', uri=self._uri, params=data, )

        return ParticipantPage(self._version, response, self._solution)

    def get_page(self, target_url):
        """
        Retrieve a specific page of ParticipantInstance records from the API.
        Request is executed immediately

        :param str target_url: API-generated URL for the requested results page

        :returns: Page of ParticipantInstance
        :rtype: twilio.rest.insights.v1.room.participant.ParticipantPage
        """
        response = self._version.domain.twilio.request(
            'GET',
            target_url,
        )

        return ParticipantPage(self._version, response, self._solution)

    def get(self, participant_sid):
        """
        Constructs a ParticipantContext

        :param participant_sid: The participant_sid

        :returns: twilio.rest.insights.v1.room.participant.ParticipantContext
        :rtype: twilio.rest.insights.v1.room.participant.ParticipantContext
        """
        return ParticipantContext(
            self._version,
            room_sid=self._solution['room_sid'],
            participant_sid=participant_sid,
        )

    def __call__(self, participant_sid):
        """
        Constructs a ParticipantContext

        :param participant_sid: The participant_sid

        :returns: twilio.rest.insights.v1.room.participant.ParticipantContext
        :rtype: twilio.rest.insights.v1.room.participant.ParticipantContext
        """
        return ParticipantContext(
            self._version,
            room_sid=self._solution['room_sid'],
            participant_sid=participant_sid,
        )

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Insights.V1.ParticipantList>'


class ParticipantPage(Page):
    """ PLEASE NOTE that this class contains beta products that are subject to
    change. Use them with caution. """

    def __init__(self, version, response, solution):
        """
        Initialize the ParticipantPage

        :param Version version: Version that contains the resource
        :param Response response: Response from the API
        :param room_sid: The room_sid

        :returns: twilio.rest.insights.v1.room.participant.ParticipantPage
        :rtype: twilio.rest.insights.v1.room.participant.ParticipantPage
        """
        super(ParticipantPage, self).__init__(version, response)

        # Path Solution
        self._solution = solution

    def get_instance(self, payload):
        """
        Build an instance of ParticipantInstance

        :param dict payload: Payload response from the API

        :returns: twilio.rest.insights.v1.room.participant.ParticipantInstance
        :rtype: twilio.rest.insights.v1.room.participant.ParticipantInstance
        """
        return ParticipantInstance(self._version, payload, room_sid=self._solution['room_sid'], )

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        return '<Twilio.Insights.V1.ParticipantPage>'


class ParticipantContext(InstanceContext):
    """ PLEASE NOTE that this class contains beta products that are subject to
    change. Use them with caution. """

    def __init__(self, version, room_sid, participant_sid):
        """
        Initialize the ParticipantContext

        :param Version version: Version that contains the resource
        :param room_sid: The room_sid
        :param participant_sid: The participant_sid

        :returns: twilio.rest.insights.v1.room.participant.ParticipantContext
        :rtype: twilio.rest.insights.v1.room.participant.ParticipantContext
        """
        super(ParticipantContext, self).__init__(version)

        # Path Solution
        self._solution = {'room_sid': room_sid, 'participant_sid': participant_sid, }
        self._uri = '/Video/Rooms/{room_sid}/Participants/{participant_sid}'.format(**self._solution)

    def fetch(self):
        """
        Fetch the ParticipantInstance

        :returns: The fetched ParticipantInstance
        :rtype: twilio.rest.insights.v1.room.participant.ParticipantInstance
        """
        payload = self._version.fetch(method='GET', uri=self._uri, )

        return ParticipantInstance(
            self._version,
            payload,
            room_sid=self._solution['room_sid'],
            participant_sid=self._solution['participant_sid'],
        )

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Twilio.Insights.V1.ParticipantContext {}>'.format(context)


class ParticipantInstance(InstanceResource):
    """ PLEASE NOTE that this class contains beta products that are subject to
    change. Use them with caution. """

    class RoomStatus(object):
        IN_PROGRESS = "in_progress"
        COMPLETED = "completed"

    class Codec(object):
        VP8 = "VP8"
        H264 = "H264"
        VP9 = "VP9"

    class EndReason(object):
        DISCONNECTED_VIA_API = "disconnected_via_api"
        SIGNALING_CONNECTION_ERROR = "signaling_connection_error"
        SIGNALING_CONNECTION_DISCONNECTED = "signaling_connection_disconnected"
        SIGNALING_CONNECTION_TIMED_OUT = "signaling_connection_timed_out"
        CLIENT_RECEIVED_AN_INVALID_SIGNALING_MESSAGE = "client_received_an_invalid_signaling_message"
        CLIENT_SENT_AN_INVALID_SIGNALING_MESSAGE = "client_sent_an_invalid_signaling_message"
        ROOM_NAME_IS_INVALID = "room_name_is_invalid"
        ROOM_NAME_IS_TOO_LONG = "room_name_is_too_long"
        ROOM_NAME_CONTAINS_INVALID_CHARACTERS = "room_name_contains_invalid_characters"
        UNABLE_TO_CREATE_ROOM = "unable_to_create_room"
        UNABLE_TO_CONNECT_TO_ROOM = "unable_to_connect_to_room"
        ROOM_CONTAINS_TOO_MANY_PARTICIPANTS = "room_contains_too_many_participants"
        ROOM_NOT_FOUND = "room_not_found"
        MAX_PARTICIPANTS_IS_OUT_OF_RANGE = "max_participants_is_out_of_range"
        ROOM_TYPE_IS_NOT_VALID = "room_type_is_not_valid"
        TIMEOUT_IS_OUT_OF_RANGE = "timeout_is_out_of_range"
        STATUS_CALLBACK_METHOD_IS_INVALID = "status_callback_method_is_invalid"
        STATUS_CALLBACK_IS_INVALID = "status_callback_is_invalid"
        STATUS_IS_INVALID = "status_is_invalid"
        ROOM_CREATION_FAILED = "room_creation_failed"
        ROOM_COMPLETED_ERROR = "room_completed_error"
        THE_ROOM_ACCOUNT_LIMIT_WAS_EXCEEDED = "the_room_account_limit_was_exceeded"
        INVALID_RECORDING_RULE = "invalid_recording_rule"
        APPROACHING_ROOM_OR_PARTICIPANT_CONCURRENCY_LIMITS = "approaching_room_or_participant_concurrency_limits"
        RECORDING_OPERATION_REQUESTED_IS_NOT_SUPPORTED_FOR_THE_ROOM_TYPE = "recording_operation_requested_is_not_supported_for_the_Room_type"
        PARTICIPANT_IDENTITY_IS_INVALID = "participant_identity_is_invalid"
        PARTICIPANT_IDENTITY_IS_TOO_LONG = "participant_identity_is_too_long"
        PARTICIPANT_IDENTITY_CONTAINS_INVALID_CHARACTERS = "participant_identity_contains_invalid_characters"
        PARTICIPANT_HAS_TOO_MANY_TRACKS = "participant_has_too_many_tracks"
        PARTICIPANT_NOT_FOUND = "participant_not_found"
        PARTICIPANT_DISCONNECTED_BECAUSE_OF_DUPLICATE_IDENTITY = "participant_disconnected_because_of_duplicate_identity"
        PARTICIPANT_ACCOUNT_LIMIT_WAS_EXCEEDED = "participant_account_limit_was_exceeded"
        INVALID_SUBSCRIBE_RULE = "invalid_subscribe_rule"
        TRACK_IS_INVALID = "track_is_invalid"
        TRACK_NAME_IS_INVALID = "track_name_is_invalid"
        TRACK_NAME_IS_TOO_LONG = "track_name_is_too_long"
        TRACK_NAME_CONTAINS_INVALID_CHARACTERS = "track_name_contains_invalid_characters"
        TRACK_NAME_IS_DUPLICATED = "track_name_is_duplicated"
        CLIENT_IS_UNABLE_TO_CREATE_OR_APPLY_A_LOCAL_MEDIA_DESCRIPTION = "client_is_unable_to_create_or_apply_a_local_media_description"
        SERVER_IS_UNABLE_TO_CREATE_OR_APPLY_A_LOCAL_MEDIA_DESCRIPTION = "server_is_unable_to_create_or_apply_a_local_media_description"
        CLIENT_IS_UNABLE_TO_APPLY_A_REMOTE_MEDIA_DESCRIPTION = "client_is_unable_to_apply_a_remote_media_description"
        SERVER_IS_UNABLE_TO_APPLY_A_REMOTE_MEDIA_DESCRIPTION = "server_is_unable_to_apply_a_remote_media_description"
        NO_SUPPORTED_CODEC = "no_supported_codec"
        MEDIA_CONNECTION_FAILED_OR_MEDIA_ACTIVITY_CEASED = "media_connection_failed_or_media_activity_ceased"
        UNABLE_TO_ACQUIRE_CONFIGURATION = "unable_to_acquire_configuration"
        UNABLE_TO_ACQUIRE_TURN_CREDENTIALS = "unable_to_acquire_TURN_credentials"

    class TwilioRealm(object):
        US1 = "us1"
        US2 = "us2"
        AU1 = "au1"
        BR1 = "br1"
        IE1 = "ie1"
        JP1 = "jp1"
        SG1 = "sg1"
        IN1 = "in1"
        DE1 = "de1"
        GLL = "gll"
        OUTSIDE = "outside"
        STAGE_US1 = "stage_us1"
        STAGE_US2 = "stage_us2"
        STAGE_AU1 = "stage_au1"
        STAGE_BR1 = "stage_br1"
        STAGE_IE1 = "stage_ie1"
        STAGE_JP1 = "stage_jp1"
        STAGE_SG1 = "stage_sg1"
        STAGE_IN1 = "stage_in1"
        STAGE_DE1 = "stage_de1"
        DEV_US1 = "dev_us1"
        DEV_US2 = "dev_us2"

    class EdgeLocation(object):
        ASHBURN = "ashburn"
        DUBLIN = "dublin"
        FRANKFURT = "frankfurt"
        SINGAPORE = "singapore"
        SYDNEY = "sydney"
        SAO_PAULO = "sao_paulo"
        ROAMING = "roaming"
        UMATILLA = "umatilla"
        TOKYO = "tokyo"

    def __init__(self, version, payload, room_sid, participant_sid=None):
        """
        Initialize the ParticipantInstance

        :returns: twilio.rest.insights.v1.room.participant.ParticipantInstance
        :rtype: twilio.rest.insights.v1.room.participant.ParticipantInstance
        """
        super(ParticipantInstance, self).__init__(version)

        # Marshaled Properties
        self._properties = {
            'participant_sid': payload.get('participant_sid'),
            'participant_identity': payload.get('participant_identity'),
            'join_time': deserialize.iso8601_datetime(payload.get('join_time')),
            'leave_time': deserialize.iso8601_datetime(payload.get('leave_time')),
            'duration_sec': deserialize.integer(payload.get('duration_sec')),
            'call_sid': payload.get('call_sid'),
            'account_sid': payload.get('account_sid'),
            'room_sid': payload.get('room_sid'),
            'status': payload.get('status'),
            'codecs': payload.get('codecs'),
            'end_reason': payload.get('end_reason'),
            'error_code': deserialize.integer(payload.get('error_code')),
            'error_code_url': payload.get('error_code_url'),
            'media_region': payload.get('media_region'),
            'properties': payload.get('properties'),
            'edge_location': payload.get('edge_location'),
            'publisher_info': payload.get('publisher_info'),
            'url': payload.get('url'),
        }

        # Context
        self._context = None
        self._solution = {
            'room_sid': room_sid,
            'participant_sid': participant_sid or self._properties['participant_sid'],
        }

    @property
    def _proxy(self):
        """
        Generate an instance context for the instance, the context is capable of
        performing various actions.  All instance actions are proxied to the context

        :returns: ParticipantContext for this ParticipantInstance
        :rtype: twilio.rest.insights.v1.room.participant.ParticipantContext
        """
        if self._context is None:
            self._context = ParticipantContext(
                self._version,
                room_sid=self._solution['room_sid'],
                participant_sid=self._solution['participant_sid'],
            )
        return self._context

    @property
    def participant_sid(self):
        """
        :returns: The participant_sid
        :rtype: unicode
        """
        return self._properties['participant_sid']

    @property
    def participant_identity(self):
        """
        :returns: The participant_identity
        :rtype: unicode
        """
        return self._properties['participant_identity']

    @property
    def join_time(self):
        """
        :returns: The join_time
        :rtype: datetime
        """
        return self._properties['join_time']

    @property
    def leave_time(self):
        """
        :returns: The leave_time
        :rtype: datetime
        """
        return self._properties['leave_time']

    @property
    def duration_sec(self):
        """
        :returns: The duration_sec
        :rtype: unicode
        """
        return self._properties['duration_sec']

    @property
    def call_sid(self):
        """
        :returns: The call_sid
        :rtype: unicode
        """
        return self._properties['call_sid']

    @property
    def account_sid(self):
        """
        :returns: The account_sid
        :rtype: unicode
        """
        return self._properties['account_sid']

    @property
    def room_sid(self):
        """
        :returns: The room_sid
        :rtype: unicode
        """
        return self._properties['room_sid']

    @property
    def status(self):
        """
        :returns: The status
        :rtype: ParticipantInstance.RoomStatus
        """
        return self._properties['status']

    @property
    def codecs(self):
        """
        :returns: The codecs
        :rtype: ParticipantInstance.Codec
        """
        return self._properties['codecs']

    @property
    def end_reason(self):
        """
        :returns: The end_reason
        :rtype: ParticipantInstance.EndReason
        """
        return self._properties['end_reason']

    @property
    def error_code(self):
        """
        :returns: The error_code
        :rtype: unicode
        """
        return self._properties['error_code']

    @property
    def error_code_url(self):
        """
        :returns: The error_code_url
        :rtype: unicode
        """
        return self._properties['error_code_url']

    @property
    def media_region(self):
        """
        :returns: The media_region
        :rtype: ParticipantInstance.TwilioRealm
        """
        return self._properties['media_region']

    @property
    def properties(self):
        """
        :returns: The properties
        :rtype: dict
        """
        return self._properties['properties']

    @property
    def edge_location(self):
        """
        :returns: The edge_location
        :rtype: ParticipantInstance.EdgeLocation
        """
        return self._properties['edge_location']

    @property
    def publisher_info(self):
        """
        :returns: The publisher_info
        :rtype: dict
        """
        return self._properties['publisher_info']

    @property
    def url(self):
        """
        :returns: The url
        :rtype: unicode
        """
        return self._properties['url']

    def fetch(self):
        """
        Fetch the ParticipantInstance

        :returns: The fetched ParticipantInstance
        :rtype: twilio.rest.insights.v1.room.participant.ParticipantInstance
        """
        return self._proxy.fetch()

    def __repr__(self):
        """
        Provide a friendly representation

        :returns: Machine friendly representation
        :rtype: str
        """
        context = ' '.join('{}={}'.format(k, v) for k, v in self._solution.items())
        return '<Twilio.Insights.V1.ParticipantInstance {}>'.format(context)
